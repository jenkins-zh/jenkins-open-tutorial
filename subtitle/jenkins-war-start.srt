1
00:00:00,333 --> 00:00:02,066


2
00:00:03,633 --> 00:00:12,066
大家好这一期给大家分享的是直接使用Jenkins.war来启动Jenkins

3
00:00:12,099 --> 00:00:17,000
我们可以通过执行JAVA命令的方式直接启动Jenkins

4
00:00:17,000 --> 00:00:20,866
这个命令很简单就直接是java -jar

5
00:00:21,966 --> 00:00:24,333
然后jenkins.war

6
00:00:24,366 --> 00:00:25,533
也就是他的一个路径

7
00:00:26,899 --> 00:00:29,199
这样的直接就启动起来了

8
00:00:29,233 --> 00:00:30,233
通常情况下呢

9
00:00:30,266 --> 00:00:33,799
我们不推荐生产环境中使用这种方式

10
00:00:34,766 --> 00:00:37,533
最主要的是这种方式呢

11
00:00:37,566 --> 00:00:39,633
无法作为的守护进程来运行

12
00:00:41,033 --> 00:00:44,399
这个守护进程在之前的视频里讲过

13
00:00:44,433 --> 00:00:50,000
也就是说他都执行的过程中呢 必须在终端里面执行 终端退出的话

14
00:00:50,000 --> 00:00:50,933
程序就退出了

15
00:00:52,133 --> 00:00:53,899
然后这种方式启动起来

16
00:00:53,933 --> 00:01:01,399
默认的服务端口是8080 应用上下文是根 也就是一个斜杠

17
00:01:01,399 --> 00:01:03,966
因此呢 访问的路径就是这样的

18
00:01:06,166 --> 00:01:10,633
这个localhost的可以换成一个127或者其他的一个IP

19
00:01:11,533 --> 00:01:13,666
好的让我们试下了个命令

20
00:01:13,700 --> 00:01:14,066
启动

21
00:01:15,900 --> 00:01:17,333
我这写好一条命令

22
00:01:19,900 --> 00:01:20,500
java -jar

23
00:01:22,033 --> 00:01:22,900
然后这是一个war包

24
00:01:24,299 --> 00:01:26,200
我这加了个参数

25
00:01:26,233 --> 00:01:28,366
我们先不解释这个参数是什么意思

26
00:01:30,833 --> 00:01:34,666
当我们看到这个输出信息的时候呢

27
00:01:34,700 --> 00:01:36,366
就可以去访问Jenkins了

28
00:01:39,566 --> 00:01:41,400
当我们看到Jenkins is fully up and running

29
00:01:41,433 --> 00:01:45,166
说明他已经启动成功

30
00:01:45,200 --> 00:01:47,633
这时候我们把这个token拷贝上

31
00:01:48,666 --> 00:01:53,200
粘贴过来,继续发到这个画面的时候

32
00:01:53,233 --> 00:01:56,266
可能会根据你的网络的情况不同

33
00:01:56,299 --> 00:01:59,566
他所需要的时间长短是不太一样的

34
00:01:59,599 --> 00:02:02,799
因为他就是需要下载一些插件的信息

35
00:02:02,799 --> 00:02:04,466
我为了演示方便的话

36
00:02:04,500 --> 00:02:05,433
OK 我们继续

37
00:02:05,466 --> 00:02:09,300
我们现在并不需要演示安装一些插件

38
00:02:09,300 --> 00:02:10,733
所以的话我选第二个项

39
00:02:12,533 --> 00:02:13,400
全部勾掉

40
00:02:14,400 --> 00:02:14,733
安装

41
00:02:16,733 --> 00:02:17,933
创建第一个管理员

42
00:02:18,933 --> 00:02:19,500
我的用户名

43
00:02:19,500 --> 00:02:21,633
密码都是admin

44
00:02:21,666 --> 00:02:22,400
保存并完成

45
00:02:23,833 --> 00:02:24,333
完成

46
00:02:26,166 --> 00:02:26,500
好了

47
00:02:26,533 --> 00:02:29,900
那我们就通过执行java的一个命令呢

48
00:02:29,933 --> 00:02:35,066
把这个Jenkins的war包启动起来 Jenkins就已经可以访问了

49
00:02:35,099 --> 00:02:36,033
访问的话

50
00:02:36,066 --> 00:02:38,266
我对这个界面简单做个介绍

51
00:02:39,366 --> 00:02:41,000
我们看到这个红色的2

52
00:02:41,966 --> 00:02:48,366
他上面有两条还值得管理员去注意的信息

53
00:02:48,400 --> 00:02:50,966
一条是已经有了新版本Jenkins

54
00:02:51,066 --> 00:02:53,433
可以更新下载

55
00:02:55,099 --> 00:02:57,333
点这个它可以自动的更新

56
00:02:57,366 --> 00:03:04,566
另外说有一些安全的告警 管理员可以根据实际情况来去作一个的操作

57
00:03:04,599 --> 00:03:06,800
那我们现在启动成功了

58
00:03:06,833 --> 00:03:10,800
那么现在是说我引用终端启动了这么一个Jenkins

59
00:03:12,300 --> 00:03:15,400
那为什么不推荐在生产环境使用呢

60
00:03:15,433 --> 00:03:19,066
你不可能说是打开这个终端一直挂在那

61
00:03:19,099 --> 00:03:20,233
当然

62
00:03:20,233 --> 00:03:24,666
我看到有一些人在Windows的机器上

63
00:03:24,666 --> 00:03:26,199
它实际上是可以这么做的

64
00:03:27,566 --> 00:03:30,866
那这个其实不是一个推荐的做法

65
00:03:30,900 --> 00:03:32,133
怎么说呢

66
00:03:32,166 --> 00:03:41,833
比如说我现在的这个终端关掉 那我们再来访问 他就其实就访问不到了。
OK,我还是打开

67
00:03:44,433 --> 00:03:45,000
继续启动

68
00:03:59,233 --> 00:04:03,866
OK.我们继续,我简单说一下原理的部分

69
00:04:05,233 --> 00:04:10,300
那么Jenkins是怎么直接通过一个命令就能启动起来呢

70
00:04:10,333 --> 00:04:13,166
那么是因为在这个Jenkins.war

71
00:04:13,199 --> 00:04:14,766
这个文件里呢

72
00:04:14,766 --> 00:04:18,100
已经内置了一个很简单的应用服务器

73
00:04:18,133 --> 00:04:20,333
也就是Jetty

74
00:04:21,233 --> 00:04:22,399
Jetty是由Java实现的

75
00:04:23,333 --> 00:04:27,199
Jetty是Java实现的一个轻量级的servlet的容器

76
00:04:28,199 --> 00:04:34,300
很大部分的这个家伙应用都是基于Servlet这种方式来去运行的

77
00:04:35,699 --> 00:04:38,600
如果对Servlet有兴趣了解的话

78
00:04:38,633 --> 00:04:40,366
自己可以搜索一下

79
00:04:42,466 --> 00:04:44,300
好那我们介绍一下

80
00:04:45,733 --> 00:04:46,899
这种方式启动

81
00:04:46,933 --> 00:04:50,399
他可以带的一些参数

82
00:04:50,433 --> 00:04:55,199
当然实际上并不是说直接通过Java命令启动的

83
00:04:55,266 --> 00:04:58,266
才能用这些参数 其他的也是可以的

84
00:04:59,533 --> 00:05:00,133
换句话说

85
00:05:00,166 --> 00:05:08,100
这些参数能都是要传给Jenkins这个应用或者是说JVM服务器的

86
00:05:10,899 --> 00:05:13,000
第一条参数是说

87
00:05:13,033 --> 00:05:14,766
我们指定他的访问端口

88
00:05:16,733 --> 00:05:21,300
现在看到他是访问的是8080

89
00:05:21,333 --> 00:05:26,399
那我们也可以把它指成80端口来访问

90
00:05:31,466 --> 00:05:33,533
当我们启动之后呢

91
00:05:33,566 --> 00:05:38,933
指着参数其实可以看到这么一条日志：Started ServerConnector

92
00:05:39,966 --> 00:05:46,366
嗯 端口是80 再往上看

93
00:05:46,399 --> 00:05:50,766
这是8080 说明参数已经起作用了

94
00:05:51,566 --> 00:05:53,533
再访问 访问不了

95
00:05:56,300 --> 00:05:58,266
就是这么个参数

96
00:05:58,300 --> 00:06:02,333
接着看下一参数 下个参数是HTTPS了

97
00:06:03,500 --> 00:06:09,366
HTTP和HTTPS分别会占用两个不同的端口

98
00:06:09,399 --> 00:06:12,133
现在我就不演示这一HTTPS

99
00:06:12,166 --> 00:06:13,166
的那个

100
00:06:14,133 --> 00:06:15,300
端口了啊

101
00:06:15,300 --> 00:06:16,333
我们演示下一个

102
00:06:17,466 --> 00:06:19,600
应用上下文加个prefix

103
00:06:22,866 --> 00:06:27,633
OK 我们现在可以看到他是说localhost直接/就可以访问

104
00:06:27,633 --> 00:06:29,133
那如果我们加上这个

105
00:06:30,699 --> 00:06:34,133
/jenkins的话就不能这么访问了

106
00:06:34,133 --> 00:06:36,166
应该访问的方式是这样的

107
00:06:40,800 --> 00:06:42,933
我们看到地址栏的地址

108
00:06:42,933 --> 00:06:43,466
地址

109
00:06:44,966 --> 00:06:47,100
我给我们看到地址栏的这个

110
00:06:47,100 --> 00:06:48,199
因为URL已经变了

111
00:06:51,899 --> 00:06:54,399
还有这个参数

112
00:06:54,399 --> 00:06:55,633
这个参数是WEB参数

113
00:06:55,633 --> 00:06:58,466
它的缓存

114
00:06:58,466 --> 00:06:58,800
缓存

115
00:06:58,833 --> 00:06:59,666
文件的目录

116
00:07:00,766 --> 00:07:04,600
我们这个其实很多情况下用不到的

117
00:07:04,600 --> 00:07:06,566
那么我现在也可以给大家去演示一下

118
00:07:10,500 --> 00:07:12,633
看看加了这个参数之后

119
00:07:12,633 --> 00:07:14,699
他会把信息放到什么地方

120
00:07:17,800 --> 00:07:21,033
让我们看一下加了个参数之后会有什么样的效果

121
00:07:22,766 --> 00:07:23,699
我放到

122
00:07:24,866 --> 00:07:25,800
在开一个终端

123
00:07:29,600 --> 00:07:32,899
这个都是JAVA WEB应用相关的信息

124
00:07:32,899 --> 00:07:34,533
比如说WEB-INF

125
00:07:35,966 --> 00:07:41,933
我们这个就是插件更新中心的一些证书 证书信息

126
00:07:41,933 --> 00:07:49,000
因此说这个目录可能是说在他的那个home目录下 也许是不在的

127
00:07:50,333 --> 00:07:52,399
我们看下一个参数

128
00:07:52,399 --> 00:07:53,433
让我们看下个参数

129
00:07:53,433 --> 00:07:55,133
就是管理员的密码和角色

130
00:07:56,366 --> 00:07:57,199
这个

131
00:07:57,199 --> 00:07:59,800
大家可以自行的测试一下

132
00:07:59,800 --> 00:08:01,333
我们演示这个参数

133
00:08:03,100 --> 00:08:05,633
基本参数看起来是没有起作用

134
00:08:07,199 --> 00:08:08,100
你把他删除了

135
00:08:08,133 --> 00:08:09,066
重新启动一下

136
00:08:09,066 --> 00:08:12,600
我说刚才的视频能看到他第一次启动之后呢

137
00:08:12,633 --> 00:08:14,466
会有一个向导

138
00:08:14,466 --> 00:08:17,766
这个参数的是来控制是不要有一个向导

139
00:08:20,699 --> 00:08:22,633
那我们把这个目录再删掉

140
00:08:23,766 --> 00:08:28,000
我们这个值设成true 还是可以看到是有这么一个

141
00:08:29,066 --> 00:08:30,133
他直接就启动了

142
00:08:30,133 --> 00:08:33,433
没有那个向导的过程

143
00:08:33,433 --> 00:08:36,433
这就是这个向导这个参数的作用

144
00:08:37,500 --> 00:08:38,833
还有两个参数是

145
00:08:40,566 --> 00:08:47,100
这个参数是说管理员是不是可以为其他的用户生成token

146
00:08:48,466 --> 00:08:52,000
这个token是用来通过API来访问的

147
00:08:52,000 --> 00:08:53,766
默认这个值是false

148
00:08:53,766 --> 00:08:59,033
那下个参数是说多分支扫描时候的并发数的限制

149
00:08:59,033 --> 00:09:05,866
这个在用多分支的同学可能会遇到 会涉及到这样的一个情况

150
00:09:05,866 --> 00:09:07,333
其他人可能不会涉及

151
00:09:07,333 --> 00:09:09,466
我就不做过多的解释了

152
00:09:09,466 --> 00:09:11,500
那么更多的参数以及环境变量了

153
00:09:11,500 --> 00:09:14,266
可以通过阅读代码来获取

154
00:09:14,266 --> 00:09:17,666
如果大家在实际用的过程中遇到其他的呢

155
00:09:17,666 --> 00:09:19,000
也可以给我反馈一下

156
00:09:19,000 --> 00:09:22,266
我把它补充了这个手册里

157
00:09:22,266 --> 00:09:23,600
我这给了个例子

158
00:09:23,600 --> 00:09:28,066
就是runSetupWizard他的这个代码的

159
00:09:28,066 --> 00:09:28,799
对应的位置

160
00:09:30,766 --> 00:09:33,299
这一讲的分享就到此为止

161
00:09:34,600 --> 00:09:35,633
谢谢大家的收看
