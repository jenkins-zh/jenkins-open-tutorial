1
00:00:04,500 --> 00:00:05,866
Label

2
00:00:05,866 --> 00:00:09,033
label是使用最广泛的一个

3
00:00:09,133 --> 00:00:15,133
也是最通用的一个 label呢 label的意思 大概的意思是

4
00:00:15,133 --> 00:00:17,300
就是说我们在给

5
00:00:18,566 --> 00:00:21,699
所有的节点上贴几个标签

6
00:00:23,366 --> 00:00:24,766
他可是可以选多个的

7
00:00:24,766 --> 00:00:26,433
比如说我有台机器

8
00:00:26,433 --> 00:00:29,600
是Linux 那你可以加个标签叫Linux

9
00:00:31,399 --> 00:00:32,633
然后他呢

10
00:00:32,633 --> 00:00:34,133
给装了一个java

11
00:00:34,133 --> 00:00:37,933
那么你可以在里面打一个java的一个标签

12
00:00:37,933 --> 00:00:38,433
这个标签

13
00:00:38,433 --> 00:00:43,200
大概就是说一些字符的空格隔开就可以了

14
00:00:43,200 --> 00:00:45,000
所以说label

15
00:00:45,033 --> 00:00:49,466
如果你想在一个有java的环境下在跑 然后编译java

16
00:00:49,466 --> 00:00:51,399
那么你就label

17
00:00:51,399 --> 00:00:54,033
单引号或者双引号里面写个java

18
00:00:54,033 --> 00:00:57,600
那么他就会帮你选择一个节点

19
00:00:57,600 --> 00:00:59,399
这个节点上面有java

20
00:01:02,899 --> 00:01:03,166
然后

21
00:01:03,166 --> 00:01:05,433
他还支持docker docker的意思

22
00:01:05,433 --> 00:01:06,000
就是说

23
00:01:09,200 --> 00:01:11,266
我要在一个容器里跑

24
00:01:11,266 --> 00:01:13,833
我也不关心你在哪个节点上 哪个机器上

25
00:01:15,000 --> 00:01:18,066
你这里面可以指定一个image

26
00:01:18,066 --> 00:01:20,166
我的这个镜像是什么

27
00:01:20,166 --> 00:01:22,466
他直接写了个maven的镜像

28
00:01:24,333 --> 00:01:26,233
然后他给你定义个label

29
00:01:26,233 --> 00:01:29,500
然后还给你这个镜像呢 有一个参数

30
00:01:29,500 --> 00:01:30,900
这个会稍微复杂一点

31
00:01:30,900 --> 00:01:32,933
那么我会录单独的视频

32
00:01:32,933 --> 00:01:39,266
单独的章节来讲解他 今天的视频主要是告诉大家有哪些东西可以用

33
00:01:41,266 --> 00:01:41,700
那么

34
00:01:41,733 --> 00:01:43,000
另外一个还有个动态

35
00:01:43,000 --> 00:01:43,500
就说

36
00:01:44,666 --> 00:01:50,333
我也没有一个现成的镜像或者基于其他的原因

37
00:01:50,333 --> 00:01:53,266
比如说你那个dockerfile呢可以放在代码仓库里

38
00:01:53,266 --> 00:01:55,599
然后呢其实可以实现动态的效果

39
00:01:55,599 --> 00:01:59,233
那么你指定一个dockerfile 他会编译完

40
00:01:59,233 --> 00:02:02,299
然后在你这个编译完后的镜像里去运行

41
00:02:04,433 --> 00:02:10,866
K8S在这个云原生时代下呢 尤其在容器技术出来之后

42
00:02:10,866 --> 00:02:13,933
K8S作为一个非常非常流行

43
00:02:13,933 --> 00:02:20,500
也是可能是将来云原生时代的一个操作系统吧

44
00:02:20,500 --> 00:02:22,666
这个大家还是要掌握的

45
00:02:22,666 --> 00:02:24,699
那么K8S呢

46
00:02:24,699 --> 00:02:27,366
他可以说你写一个标准的K8S

47
00:02:27,366 --> 00:02:29,900
的yaml的这样的格式

48
00:02:29,900 --> 00:02:31,199
它这里面写了一个pod

49
00:02:32,466 --> 00:02:34,066
我们现在不讲K8S

50
00:02:34,066 --> 00:02:36,866
的语法该怎么写 基本的意思

51
00:02:36,866 --> 00:02:40,166
就是说它会动态地起来一个pod

52
00:02:40,166 --> 00:02:43,066
然后在pod里面执行你的流水线

53
00:02:43,066 --> 00:02:44,166
的构建

54
00:02:51,099 --> 00:02:53,533
好 这就是我们的agent

55
00:02:56,300 --> 00:02:56,599
post

56
00:02:57,133 --> 00:02:57,966
就刚才我说了

57
00:02:57,966 --> 00:02:59,633
他有很多的不同阶段

58
00:02:59,633 --> 00:03:02,599
在不同阶段呢 会执行不同的逻辑代码

59
00:03:02,599 --> 00:03:06,900
那个代码其实跟其他的代码没有什么区别啊

60
00:03:06,900 --> 00:03:08,099
现在大概过一下

61
00:03:08,099 --> 00:03:11,333
有哪些Conditions或者说条件

62
00:03:11,333 --> 00:03:12,900
或者阶段也行吧

63
00:03:12,900 --> 00:03:14,666
大家脑子里有个印象

64
00:03:14,666 --> 00:03:17,066
然后具体记不住这个单词怎么写

65
00:03:17,066 --> 00:03:20,166
没有关系 过来查这个文档就好了 always

66
00:03:20,166 --> 00:03:22,366
总是 就是每次运行

67
00:03:22,366 --> 00:03:25,699
完了以后都会去调一段逻辑

68
00:03:25,699 --> 00:03:29,400
changed 就是说你代码变了这一次构建

69
00:03:29,400 --> 00:03:30,300
如果代码变了

70
00:03:30,333 --> 00:03:33,500
才会跑这个

71
00:03:33,500 --> 00:03:35,133
fixed他是跟这个

72
00:03:37,400 --> 00:03:40,000
阶段的成功失败有关系的

73
00:03:40,000 --> 00:03:41,633
如果上一次失败 这一次成功了

74
00:03:41,633 --> 00:03:43,666
那么可能会跑 还有regression

75
00:03:43,666 --> 00:03:47,633
aborted failed success unstable 

76
00:03:47,633 --> 00:03:48,900
unsuccessful clean

77
00:03:49,866 --> 00:03:50,300
cleanup

78
00:03:51,300 --> 00:03:52,366
这个详细的细节

79
00:03:52,366 --> 00:03:53,233
你可以看一下

80
00:03:57,266 --> 00:03:59,099
好 stages刚才也讲过了

81
00:03:59,133 --> 00:03:59,699
就是stages

82
00:03:59,733 --> 00:04:01,466
里面有step

83
00:04:01,466 --> 00:04:03,400
step要起个名字

84
00:04:03,400 --> 00:04:03,966
啊 说错了

85
00:04:06,800 --> 00:04:10,433
stages刚才讲过了 里面有stage stage有名字

86
00:04:10,433 --> 00:04:13,500
stage里面有step 大概是这样一个结构

87
00:04:16,833 --> 00:04:22,333
然后比较有更多功能和比较丰富的东西

88
00:04:22,333 --> 00:04:27,466
在指令里面 指令是我们最应该掌握的 指令

89
00:04:27,466 --> 00:04:33,266
包括哪些呢 有环境 有选项 参数  触发器

90
00:04:33,266 --> 00:04:37,466
还有Condtions的一个语法 tools tools

91
00:04:37,466 --> 00:04:43,633
就是说你可以在Jenkins的系统的配置里面的添加些工具

92
00:04:43,633 --> 00:04:46,833
那么让他 他会让你去方便的使用

93
00:04:46,833 --> 00:04:50,133
这些工具 input: input就是说

94
00:04:50,133 --> 00:04:52,500
我在执行这个指令的时候

95
00:04:52,500 --> 00:04:55,233
这个流水线会暂停

96
00:04:55,233 --> 00:04:58,500
然后需要你的交互 来去继续

97
00:04:58,533 --> 00:05:03,000
你说继续还是停止 1⃣️就是一个条件

98
00:05:03,000 --> 00:05:05,399
什么时候会运行

99
00:05:05,399 --> 00:05:06,800
这个stage OK

100
00:05:06,800 --> 00:05:09,766
我们挨个大概过一下  看看他长什么样子

101
00:05:10,666 --> 00:05:13,699
environment就是放在外面

102
00:05:13,699 --> 00:05:14,699
也可以stage下面

103
00:05:14,733 --> 00:05:18,233
就是定义一些key value

104
00:05:18,233 --> 00:05:21,333
然后在这个里面就可以引用这个 key value了

105
00:05:25,899 --> 00:05:27,566
比如这定义了一个变量

106
00:05:27,566 --> 00:05:29,033
那么在这去使用它

107
00:05:30,199 --> 00:05:30,633
所以说

108
00:05:30,633 --> 00:05:34,500
这个环境变量 实际上它会在运行期呢

109
00:05:34,500 --> 00:05:36,833
塞到他那个shell上下文的这个

110
00:05:36,833 --> 00:05:37,800
环境变量

111
00:05:37,800 --> 00:05:39,866
所以我们看shel这个写法

112
00:05:39,866 --> 00:05:42,666
的话就是$这么一个名字

113
00:05:45,466 --> 00:05:47,399
这块就是说

114
00:05:47,433 --> 00:05:50,033
我除了是说写一些写死的

115
00:05:52,633 --> 00:05:53,699
这个除了

116
00:05:53,733 --> 00:05:55,133
写死的这么一个字符串呢

117
00:05:55,133 --> 00:05:56,399
他也可以说

118
00:05:56,433 --> 00:06:01,433
取一个security 就是我们的凭据 我们从凭据里面可以取到用户名

119
00:06:01,433 --> 00:06:03,366
密码或者其他东西

120
00:06:03,366 --> 00:06:08,966
options这个东西比较有用

121
00:06:08,966 --> 00:06:16,600
就是说options其实是在控制或者约束你这个流水线的大致一个行为

122
00:06:16,600 --> 00:06:19,166
比如说丢弃构建

123
00:06:19,166 --> 00:06:20,699
就是说

124
00:06:20,699 --> 00:06:23,199
比如说流水线我运行了一百次

125
00:06:23,199 --> 00:06:25,633
然后比如说一天运行一百次

126
00:06:25,633 --> 00:06:26,699
那么运行一个月之后

127
00:06:26,733 --> 00:06:28,100
那会有多少次呢

128
00:06:28,100 --> 00:06:30,333
有些历史构建的可能不太需要

129
00:06:31,533 --> 00:06:34,366
比如说他这写的就保持一个

130
00:06:38,100 --> 00:06:39,766
比如说会把代码

131
00:06:39,766 --> 00:06:42,233
这个是会把代码checkout到一个子目录

132
00:06:43,766 --> 00:06:45,666
这个是说不允许并发构建

133
00:06:46,933 --> 00:06:50,133
有些构建呢 他如果

134
00:06:50,133 --> 00:06:53,233
你触发三次 三次同时运行的话

135
00:06:53,233 --> 00:06:54,399
这可能会乱

136
00:06:54,399 --> 00:06:56,100
所以他不允许你并发就构建

137
00:06:57,600 --> 00:06:58,266
这个是说

138
00:06:58,266 --> 00:07:00,033
禁止resume

139
00:07:01,699 --> 00:07:03,899
resume的概念就是说

140
00:07:03,899 --> 00:07:06,733
当我一个流水线正在运行过程中

141
00:07:06,733 --> 00:07:07,733
Jenkins重启了

142
00:07:09,366 --> 00:07:10,766
重启完之后呢

143
00:07:10,766 --> 00:07:12,433
它默认的话

144
00:07:12,433 --> 00:07:16,366
比如说你有三个阶段 从第二个阶段开始重启了

145
00:07:16,366 --> 00:07:18,666
那么当你重启成功之后呢

146
00:07:18,666 --> 00:07:22,866
它会从第二个阶段开始接着往后运行

147
00:07:22,866 --> 00:07:26,800
但有些情况呢 这个可能是有问题的

148
00:07:28,133 --> 00:07:31,033
比如说你的第一个阶段是克隆代码

149
00:07:31,033 --> 00:07:32,633
第二个阶段是构建

150
00:07:34,133 --> 00:07:35,866
如果你没有克隆代码

151
00:07:35,866 --> 00:07:38,133
你没有代码 就不可能构建

152
00:07:38,133 --> 00:07:38,766
所以说呢

153
00:07:39,800 --> 00:07:44,399
阶段之间有相互依赖关系的 这个就需要把它disable

154
00:07:44,433 --> 00:07:45,466
要不然可能会报错

155
00:07:50,000 --> 00:07:50,533
还有这个
