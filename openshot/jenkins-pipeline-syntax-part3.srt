1
00:00:02,670 --> 00:00:05,670
这个安静期指的是说

2
00:00:05,671 --> 00:00:06,750
比如你的代码

3
00:00:07,980 --> 00:00:10,201
只要变更那么就触发流水线

4
00:00:10,201 --> 00:00:14,460
如果这个代码仓库提交的人很多很快

5
00:00:14,462 --> 00:00:16,981
那么它触发会触发很多很多

6
00:00:16,981 --> 00:00:18,360
这个其实是没有必要的

7
00:00:20,370 --> 00:00:21,330
因为可能是构建

8
00:00:21,331 --> 00:00:23,220
最后一个来就可以了

9
00:00:23,221 --> 00:00:24,390
所以它这个安静期

10
00:00:24,392 --> 00:00:28,231
就是说30，我30秒帮你处理

11
00:00:28,232 --> 00:00:29,311
当你触发了以后

12
00:00:29,311 --> 00:00:35,700
它会等你30秒，等你30秒到了之后再去构建

13
00:00:35,701 --> 00:00:38,100
因此就是在30秒之内呢

14
00:00:38,101 --> 00:00:40,170
如果它触发多次

15
00:00:40,171 --> 00:00:42,330
它会合并成一个

16
00:00:42,331 --> 00:00:44,670
减少触发的次数

17
00:00:45,660 --> 00:00:50,310
retry 就是我整个这个流水线失败了之后你会再次重试

18
00:00:52,260 --> 00:00:54,570
跳过默认的clone

19
00:00:54,571 --> 00:00:58,530
这个在多分支流水线或者一些场景上可能会有用

20
00:00:58,531 --> 00:01:00,300
我们后面再讲它

21
00:01:00,301 --> 00:01:01,680
timeout就是说

22
00:01:01,681 --> 00:01:03,660
如果流水线它发生一些问题

23
00:01:03,661 --> 00:01:09,600
比如说一直在等待一个链接失败或者一些特别场景

24
00:01:09,601 --> 00:01:12,570
它会执行很长很长时间

25
00:01:12,571 --> 00:01:13,980
那其实可能是没有必要的

26
00:01:13,981 --> 00:01:16,560
比如说通常来说你的一个构建

27
00:01:16,561 --> 00:01:19,770
可能说一个小时之内构建完成正常

28
00:01:20,820 --> 00:01:22,770
24小时还在跑

29
00:01:22,771 --> 00:01:24,090
那肯定不正常

30
00:01:24,091 --> 00:01:26,010
那么你这也可以给它一个时间

31
00:01:27,090 --> 00:01:29,075
如果超过这个时间，流水线会失败

32
00:01:31,590 --> 00:01:33,510
还有一些其它的大家可以自己看一下

33
00:01:35,640 --> 00:01:38,010
然后参数，参数是这样的

34
00:01:38,012 --> 00:01:41,311
当我一执行流水线的时候默认了它

35
00:01:41,311 --> 00:01:42,600
你比如说你点一下

36
00:01:42,601 --> 00:01:44,400
它立马就开始执行

37
00:01:44,401 --> 00:01:45,180
但有些时候呢

38
00:01:45,181 --> 00:01:47,730
我们希望有些参数嗯

39
00:01:47,731 --> 00:01:54,120
比如说我这个流水线的其中一个环节是要发布应用到某一个环境上

40
00:01:55,860 --> 00:01:59,130
那么我想在执行的时候呢

41
00:01:59,130 --> 00:02:05,729
要选一下是要发布到dev环境还是发布到staging环境，那么你就可以提供一个参数

42
00:02:06,930 --> 00:02:08,190
或者说一个密码

43
00:02:08,191 --> 00:02:11,670
你可以说我某一个操作需要一个密码这个密码呢

44
00:02:11,672 --> 00:02:13,801
我不能写在jenkinsfile里面

45
00:02:13,802 --> 00:02:17,425
而是要每次人来输入

46
00:02:18,060 --> 00:02:20,190
OK parameter这参数的类型的话

47
00:02:20,191 --> 00:02:22,380
有这个字符串文本

48
00:02:22,381 --> 00:02:25,560
布尔值选择还有密码

49
00:02:25,561 --> 00:02:30,870
当然还有很多很多其它的，你装对应的插件就可以了

50
00:02:30,871 --> 00:02:32,070
有具体的话

51
00:02:32,071 --> 00:02:34,920
我们会在具体的章节那边去分享

52
00:02:37,050 --> 00:02:41,010
触发器也是一个比较重要的环节

53
00:02:41,011 --> 00:02:44,025
就是这个除了我们手动触发以外

54
00:02:44,025 --> 00:02:45,270
触发器就是说

55
00:02:45,270 --> 00:02:47,279
你可以定时的触发

56
00:02:48,420 --> 00:02:52,020
比如说我每天晚上都要跑一个测试

57
00:02:52,020 --> 00:02:53,459
这是属于定时的触发

58
00:02:54,510 --> 00:02:55,320
还一个是说

59
00:02:57,270 --> 00:02:58,740
我定期去检查

60
00:02:58,742 --> 00:03:00,121
我的代码里面变更了

61
00:03:00,121 --> 00:03:03,960
我不是说一分钟检查一次，代码变更了它才触发

62
00:03:03,961 --> 00:03:06,720
那么这就是pollSCM

63
00:03:06,722 --> 00:03:08,341
这个可以写个cron的表达式

64
00:03:08,341 --> 00:03:09,720
上面一样啊

65
00:03:09,721 --> 00:03:11,130
upstream是什么意思呢

66
00:03:12,360 --> 00:03:18,660
就是说我的一个上游，比如说A工程依赖B工程

67
00:03:18,661 --> 00:03:21,840
那么B工程就是A工程的上游

68
00:03:21,841 --> 00:03:23,940
那么我的上游变化

69
00:03:23,941 --> 00:03:25,980
我希望我自己也跟着构建一下

70
00:03:25,981 --> 00:03:27,060
那么就输入upstream

71
00:03:29,490 --> 00:03:33,225
这个cron语法的大概是这样的

72
00:03:33,225 --> 00:03:39,450
分钟，小时，天，月，还有周

73
00:03:39,810 --> 00:03:41,850
你挨个去对比一下

74
00:03:41,851 --> 00:03:44,040
很多人是H不太清楚

75
00:03:44,041 --> 00:03:46,320
H是hash的意思

76
00:03:46,321 --> 00:03:53,010
就是说，我们构建的其实并不是说特别的需要精准

77
00:03:53,010 --> 00:03:57,780
比如说我就得十点整的时候会运行

78
00:03:57,781 --> 00:03:58,980
其实是10点01分

79
00:03:58,981 --> 00:04:01,560
10点02分也没有关系

80
00:04:01,561 --> 00:04:04,800
这个精度不需要那么高的

81
00:04:04,801 --> 00:04:07,850
那么它的这个H的意思就是说

82
00:04:09,540 --> 00:04:15,600
有很多很多流水线设置的在10 00整的时候去运行

83
00:04:15,601 --> 00:04:17,730
那么它就会把这些分散开

84
00:04:17,731 --> 00:04:21,270
不会在一个点上集中的去触发

85
00:04:21,271 --> 00:04:24,900
这样可能会减轻jenkins压力

86
00:04:24,901 --> 00:04:26,040
避免盘崩掉

87
00:04:32,040 --> 00:04:34,380
这些都讲过，简单

88
00:04:34,381 --> 00:04:37,260
在接下来input的意思是

89
00:04:37,261 --> 00:04:38,190
我刚才提到了

90
00:04:38,191 --> 00:04:41,970
就是说我在流水线执行的过程中

91
00:04:41,971 --> 00:04:46,380
希望能人工交互一下

92
00:04:46,381 --> 00:04:48,540
我可以说输入一些参数

93
00:04:50,580 --> 00:04:52,560
比如说你这个到了这环节

94
00:04:52,561 --> 00:04:54,025
我要输个密码

95
00:04:54,025 --> 00:04:57,300
或者输一个环境的什么信息都是可以的

96
00:04:57,301 --> 00:04:59,880
或者我直接终止掉了不干

97
00:04:59,881 --> 00:05:00,870
比如说我上线呀

98
00:05:02,760 --> 00:05:04,620
这时候可能要人工确认一下

99
00:05:04,621 --> 00:05:06,150
我是不是要上线了

100
00:05:06,150 --> 00:05:07,740
上线我再继续

101
00:05:07,741 --> 00:05:08,829
不上线我就终止了

102
00:05:09,510 --> 00:05:11,310
但要小心提示就是

103
00:05:11,311 --> 00:05:13,830
当你选择了abord之后

104
00:05:13,831 --> 00:05:15,420
整个流水线就失败了

105
00:05:15,421 --> 00:05:19,590
有些情况可能我们不希望流水线失败

106
00:05:19,591 --> 00:05:21,450
那么怎么处理的话

107
00:05:21,451 --> 00:05:23,670
我后面的视频会介绍

108
00:05:23,671 --> 00:05:28,170
大家先知道一个叫input的可以干这些事情就可以了

109
00:05:29,520 --> 00:05:32,790
input的参数怎么用的话参考这个例子

110
00:05:32,791 --> 00:05:36,625
这里一个person，这拿变量来取它

111
00:05:36,625 --> 00:05:38,940
when的意思就是说，我们直接看例子

112
00:05:39,775 --> 00:05:42,240
when意思是说

113
00:05:42,241 --> 00:05:44,400
我这个stage只有在

114
00:05:45,600 --> 00:05:48,630
当前的branch是production的时候才会运行

115
00:05:50,340 --> 00:05:52,290
这个情况很有用的

116
00:05:52,291 --> 00:05:59,610
比如说我希望只有在production的时候才去部署

117
00:05:59,611 --> 00:06:00,480
这个例子是这样

118
00:06:02,520 --> 00:06:03,600
还有其它的例子

119
00:06:03,601 --> 00:06:04,140
比如说

120
00:06:07,050 --> 00:06:08,100
这个是分支

121
00:06:08,101 --> 00:06:09,900
你也可以写个表达式对吧

122
00:06:09,901 --> 00:06:12,000
只要release的时候

123
00:06:12,001 --> 00:06:16,020
release-的时候它才会运行

124
00:06:16,021 --> 00:06:18,810
changelog，你的changelog里面

125
00:06:18,811 --> 00:06:19,920
你的提交日志里面

126
00:06:21,420 --> 00:06:23,190
如果说加上一句话

127
00:06:23,191 --> 00:06:25,140
就是skip什么什么东西

128
00:06:25,141 --> 00:06:27,180
那么我这个stage就跳过

129
00:06:27,181 --> 00:06:28,500
我就不玩了

130
00:06:28,501 --> 00:06:32,625
changeset也是，它是说

131
00:06:33,480 --> 00:06:36,150
当有一类文件的时候

132
00:06:36,151 --> 00:06:37,740
我才会去执行

133
00:06:37,741 --> 00:06:41,160
比如说我包含Java文件

134
00:06:41,160 --> 00:06:44,790
因为我是在编译java，我们如果我这次没java文件

135
00:06:44,791 --> 00:06:47,790
那我们就不编译

136
00:06:47,791 --> 00:06:48,660
就这么一个逻辑

137
00:06:51,180 --> 00:06:52,380
changeRequest

138
00:06:52,381 --> 00:06:54,425
environment说的是

139
00:06:54,425 --> 00:06:57,630
我有某一个环境变量，而且它的值是production的时候才执行

140
00:06:58,830 --> 00:07:03,330
然后equals，还有表达式(expression)它的意思

141
00:07:03,331 --> 00:07:08,310
就是说我也可以把多个条件的去做一个判断

142
00:07:08,311 --> 00:07:12,600
比如说这个当前num是2的时候我才执行

143
00:07:13,890 --> 00:07:19,075
然后它还嵌套not,anyOf,allOf

144
00:07:19,651 --> 00:07:21,810
任何一个条件满足了都是可以的

145
00:07:23,760 --> 00:07:25,350
或者说它是有那个触发的

146
00:07:26,340 --> 00:07:27,930
等等

147
00:07:27,931 --> 00:07:30,480
这个是我们的这个when

148
00:07:32,970 --> 00:07:34,650
还有一个是并行执行

149
00:07:34,650 --> 00:07:39,120
并行执行就是说我一个stage

150
00:07:39,121 --> 00:07:39,810
比如说

151
00:07:41,130 --> 00:07:44,130
构建，我在三个平台上构建

152
00:07:44,131 --> 00:07:45,960
那么我就不希望串行

153
00:07:45,960 --> 00:07:47,910
串行它是一个个走

154
00:07:47,911 --> 00:07:48,510
会比较慢

155
00:07:48,510 --> 00:07:50,575
并行就是一个大的stage下

156
00:07:50,575 --> 00:07:58,855
比如说sequential上面就会同时在运行这三个stage

157
00:07:59,700 --> 00:08:03,000
我们的顺序就是这个执行完了以后

158
00:08:04,290 --> 00:08:09,075
开始执行这个大的，这个大的里面又有三个

159
00:08:09,075 --> 00:08:11,070
那么这3个，会同时执行

160
00:08:12,961 --> 00:08:15,360
这三个执行到这个的时候呢

161
00:08:15,361 --> 00:08:18,030
又有两个，它两个又会去执行

162
00:08:19,140 --> 00:08:20,730
执行到了这个阶段的时候

163
00:08:20,731 --> 00:08:25,890
可能是说会同时有4个在同时执行

164
00:08:32,190 --> 00:08:32,880
但实际上

165
00:08:32,881 --> 00:08:37,410
这个parallel的这个并行执行的不建议搞得太多太复杂

166
00:08:38,340 --> 00:08:39,450
一个是性能不好

167
00:08:39,451 --> 00:08:41,850
另外说维护起来也很困难

168
00:08:43,020 --> 00:08:45,930
matrix的意思是说

169
00:08:46,980 --> 00:08:48,300
比如说我有些东西呢

170
00:08:48,301 --> 00:08:52,500
希望在linux,mac,window下去执行

171
00:08:53,910 --> 00:08:56,670
而且我希望在这么多浏览器下执行

172
00:08:56,671 --> 00:08:59,100
那么如果你要写stage的话

173
00:08:59,101 --> 00:09:03,150
相当于3X4，12个就会很复杂

174
00:09:03,151 --> 00:09:04,980
很难以去维护

175
00:09:04,981 --> 00:09:05,610
最关键的是

176
00:09:05,611 --> 00:09:07,770
它的过程可能都是一模一样的

177
00:09:07,771 --> 00:09:09,270
命令都是一模一样的

178
00:09:09,271 --> 00:09:11,610
Matrix就可以干这件事情

179
00:09:11,611 --> 00:09:14,640
Matrix到时候我也会做一个单独的章节来介绍

180
00:09:20,430 --> 00:09:22,050
我们看看还有什么东西

181
00:09:28,230 --> 00:09:32,460
它下面就是说讲了一下两种语法的一个对比

182
00:09:32,461 --> 00:09:34,830
这个是脚本式

183
00:09:34,830 --> 00:09:39,481
就是node stage if-else，流程控制

184
00:09:39,481 --> 00:09:41,430
这是一个try-catch异常的捕捉

185
00:09:43,260 --> 00:09:44,070
它这个

186
00:09:45,870 --> 00:09:48,510
介绍的跟我刚才描述的基本是一样的

187
00:09:49,890 --> 00:09:51,180
大家有感兴趣可以

188
00:09:52,320 --> 00:09:53,610
接下来自己去看一下

