1
00:00:03,180 --> 00:00:05,750
大家好，欢迎观看由Jenkins中文社区

2
00:00:05,751 --> 00:00:09,331
联合多家社区录制的Jenkins系列教程

3
00:00:09,331 --> 00:00:11,071
接着上一次流水线语法部分

4
00:00:11,071 --> 00:00:17,220
我们把剩下的怎么通过脚本生成器来快速的写一个流水线脚本

5
00:00:17,221 --> 00:00:21,525
大致的内容会包括：怎么去使用脚本生成器

6
00:00:22,100 --> 00:00:26,064
然后，以及一些官方的例子、其他的例子

7
00:00:27,180 --> 00:00:30,120
现在是Jenkins的web界面

8
00:00:30,121 --> 00:00:33,520
我们先创建一个流水线，点确定

9
00:00:33,520 --> 00:00:35,791
当我们创建流水线之后

10
00:00:35,792 --> 00:00:41,600
在页面的最下方，有一个流水线语法的一个链接可以点

11
00:00:42,275 --> 00:00:44,150
我们先点一下应用

12
00:00:44,425 --> 00:00:47,760
点流水线语法，它会弹出一个新的对话框

13
00:00:48,840 --> 00:00:53,730
它这里面的话，就是我们所谓的流水线脚本生成器

14
00:00:53,731 --> 00:00:56,500
我们先看下左侧，第一个是片段生成器

15
00:00:56,500 --> 00:00:56,525
这里的片段它指的是

16
00:00:56,525 --> 00:00:58,650
这里的片段它指的是

17
00:00:58,650 --> 00:01:03,570
它所生成的脚本，并不是可以独立去运行的

18
00:01:03,572 --> 00:01:07,725
只是一个，比如说一个指令的一些写法

19
00:01:08,341 --> 00:01:12,240
另外说，声明式的指令生成

20
00:01:12,241 --> 00:01:16,290
这个声明式指令生成器，主要针对的是声明式的语法

21
00:01:16,291 --> 00:01:19,230
帮助大家快速的写一个声明式的流水线

22
00:01:19,231 --> 00:01:21,250
而不需要记住它那些结构

23
00:01:21,625 --> 00:01:23,625
简单回忆一下

24
00:01:23,940 --> 00:01:25,890
我们的流水线分为两类

25
00:01:25,891 --> 00:01:28,440
一个是脚本式，和声明式的。

26
00:01:28,442 --> 00:01:31,550
声明式的话，在上一次的课程里面讲到

27
00:01:31,800 --> 00:01:35,820
有节点、环境、参数等等，其他的

28
00:01:35,820 --> 00:01:38,820
这块是在线的文档的链接

29
00:01:38,821 --> 00:01:41,790
我们可以看到，它跳转到了官方的网站里面

30
00:01:43,500 --> 00:01:46,250
也就是上一讲我们打开的那个页面

31
00:01:46,831 --> 00:01:48,360
还有一个是步骤的参考

32
00:01:49,150 --> 00:01:51,475
步骤参考实际上是一些例子

33
00:01:54,000 --> 00:01:55,925
全局变量参考

34
00:01:55,925 --> 00:02:00,625
这里的全局变量，跟很多语言里的全局变量还是很相似的

35
00:02:00,925 --> 00:02:03,725
意思就是说，我在这个流水线脚本里面

36
00:02:03,725 --> 00:02:07,921
任何地方，（修正）几乎是任何一个地方都是可以使用的

37
00:02:07,922 --> 00:02:11,641
我们也可以把它类比成shell脚本里面的一些全局变量

38
00:02:11,641 --> 00:02:12,925
比如path啊，等等

39
00:02:12,925 --> 00:02:15,421
说到shell里面的脚本全局变量呢

40
00:02:15,451 --> 00:02:18,120
其实在Jenkins流水线里面

41
00:02:18,121 --> 00:02:21,600
如果你想用操作系统里面的一些全局变量

42
00:02:21,600 --> 00:02:22,875
比如说path呀，其他的

43
00:02:22,875 --> 00:02:26,670
那么其实它是属于一个特殊的环境变量

44
00:02:26,672 --> 00:02:31,051
全局环境变量env，也就是这个

45
00:02:31,051 --> 00:02:33,330
因此这两个地方的使用方法是一样的

46
00:02:33,331 --> 00:02:38,002
这个是，这个是环境变量，这个是变量，不太一样

47
00:02:38,491 --> 00:02:43,350
挑重点的东西看一下，最重点的是这个片断生成器

48
00:02:43,350 --> 00:02:52,150
就是说Jenkins里面会提供了很多很多的DSL，也就是我们的指令，可以用

49
00:02:52,456 --> 00:02:56,550
包括第一个显示的归档，成品归档

50
00:02:56,825 --> 00:02:59,250
还有这个echo

51
00:02:59,251 --> 00:03:00,425
比如执行shell

52
00:03:01,200 --> 00:03:04,380
很多人在执行shell的时候会遇到一个问题

53
00:03:04,381 --> 00:03:08,370
说怎么才能知道我这个shell是不是执行成功了呢

54
00:03:08,371 --> 00:03:11,130
那我们就看一下这个命令是怎么用的

55
00:03:12,720 --> 00:03:18,325
你可以输入一个s，它快速定位到下面的一些选项

56
00:03:18,575 --> 00:03:21,275
我输个sh，那么就来这儿了

57
00:03:21,275 --> 00:03:25,860
来到这儿选完之后，它会动态地产生一个表单

58
00:03:25,861 --> 00:03:29,725
这里面最重要的，最大的一块,也就是Shell Script

59
00:03:29,725 --> 00:03:31,981
也就是你这个shell命令是怎么写的

60
00:03:31,981 --> 00:03:35,880
比如说我先输出一下这个IP

61
00:03:35,881 --> 00:03:38,160
当然，这个没有实际意义

62
00:03:38,161 --> 00:03:41,875
比如说我再看一下进程，对吧

63
00:03:43,951 --> 00:03:48,571
大家其实要特别关注下，在旁边的一个问号的按钮

64
00:03:48,571 --> 00:03:52,980
它就会解释你这个字段是什么意思，有什么作用

65
00:03:53,800 --> 00:03:58,680
比如说这个的话就是执行一个B-shell,对吧

66
00:03:58,681 --> 00:04:00,360
通常是unix模式

67
00:04:00,361 --> 00:04:03,480
另外还有一个非常非常重点的东西的话

68
00:04:03,481 --> 00:04:05,580
大家可以注意一下，就是这块

69
00:04:07,125 --> 00:04:10,680
部分的这个问号点开之后

70
00:04:10,681 --> 00:04:14,520
右下角会有一个这样的一个区域吧

71
00:04:14,522 --> 00:04:17,581
这个区域，如果你点一下的话

72
00:04:17,581 --> 00:04:22,798
实际上能跳到它对应的插件的代码仓库地址

73
00:04:23,850 --> 00:04:26,340
OK也就是说

74
00:04:26,341 --> 00:04:30,270
比如说你想做一个类似的功能

75
00:04:30,271 --> 00:04:31,830
然后写一个插件

76
00:04:31,831 --> 00:04:33,750
那么你可以点下这个

77
00:04:33,752 --> 00:04:35,371
然后进入到它的那个插件里面

78
00:04:35,371 --> 00:04:37,980
进而去查找它对应的代码是什么

79
00:04:39,720 --> 00:04:44,425
但这个就属于插件开发的部分，我就不再细讲了

80
00:04:44,425 --> 00:04:46,980
在后面会去介绍

81
00:04:46,982 --> 00:04:48,811
好，我们点开高级

82
00:04:48,811 --> 00:04:52,850
点高级的话，都能看到右侧都是有这个帮助的按钮的

83
00:04:52,850 --> 00:04:55,230
有几个重要的字段

84
00:04:55,230 --> 00:04:58,925
比如这个，返回标准的输出

85
00:04:59,175 --> 00:05:01,849
比如说，我们点这个

86
00:05:03,210 --> 00:05:07,550
有一个变量，比如说text等于它

87
00:05:07,550 --> 00:05:10,550
那么这时候你echo text的话

88
00:05:10,831 --> 00:05:13,050
实际上拿不到任何内容

89
00:05:13,051 --> 00:05:16,890
因为它默认不会把输出的内容返回的

90
00:05:16,891 --> 00:05:18,660
那么这一个选项就是这个意思

91
00:05:18,661 --> 00:05:19,620
当你勾上之后

92
00:05:24,150 --> 00:05:27,240
这个错误信息也是很重要的

93
00:05:27,241 --> 00:05:28,410
我们再看一下

94
00:05:28,411 --> 00:05:34,425
它说丢失了这么一个变量，它缺少一个FilePath

95
00:05:36,480 --> 00:05:38,760
为什么呢

96
00:05:38,761 --> 00:05:42,750
因为我们这里面实际上，一个节点都没有指定

97
00:05:43,650 --> 00:05:47,345
所以说它可能，不知道该在什么地方去执行的

98
00:05:48,180 --> 00:05:49,229
因为他要执行shell

99
00:05:51,120 --> 00:05:52,260
最简单的办法

100
00:05:54,270 --> 00:05:55,530
大家可以看到

101
00:05:55,531 --> 00:05:59,220
第1个echo是打印了一个null

102
00:05:59,221 --> 00:06:02,940
我们再看第2个echo，第2个echo打印出东西来了

103
00:06:04,260 --> 00:06:09,495
说明我们当return false的时候是得不到shell命令的执行结果的

104
00:06:09,733 --> 00:06:12,045
OK,这个shell就不再详细讲了

105
00:06:12,969 --> 00:06:14,131
它是这样去使用的

106
00:06:14,131 --> 00:06:16,080
关于这里面比较重要的DSL

107
00:06:16,081 --> 00:06:19,170
我也会在单独的课程里面去讲

108
00:06:19,171 --> 00:06:20,850
这里面主要是讲它是怎么用的

109
00:06:21,840 --> 00:06:25,450
比如说我们要等待的交互式输入的时候可以

110
00:06:25,450 --> 00:06:27,300
也是可以点开

111
00:06:27,302 --> 00:06:29,248
也可以看每一个是怎么写的

112
00:06:30,331 --> 00:06:34,709
这里的好处就是，你不需要再记住它这个东西该怎么写了

113
00:06:35,804 --> 00:06:38,772
比如说刚才那个shell的话还是比较简单的

114
00:06:39,211 --> 00:06:44,670
最最简单的写法，可能就是直接是这样，是最简单的

115
00:06:44,671 --> 00:06:45,960
还有很容易记住的

116
00:06:45,961 --> 00:06:47,275
没什么字段

117
00:06:47,275 --> 00:06:51,870
但是，如果说让你要写一个等待交互输入

118
00:06:53,010 --> 00:06:55,320
那么这个就字段比较多了

119
00:06:55,321 --> 00:06:59,381
123456......可以有6个

120
00:06:59,731 --> 00:07:02,850
那么这个参数呢就更复杂了

121
00:07:02,851 --> 00:07:05,250
如果是个凭据的话是怎么写呢

122
00:07:07,620 --> 00:07:09,360
有这么多就记不住了

123
00:07:09,361 --> 00:07:13,170
所以我这里说的片段生成器最大的作用

124
00:07:13,171 --> 00:07:16,020
就是让你不再需要把它这些细节都记住

125
00:07:17,370 --> 00:07:18,660
不管是你一个新手

126
00:07:18,661 --> 00:07:21,420
还是说有过使用经验的人

127
00:07:21,421 --> 00:07:23,580
要你把这么多东西记住

128
00:07:23,581 --> 00:07:25,290
还是非常非常困难的

129
00:07:25,291 --> 00:07:27,887
尤其这一块，它是一个Java类

130
00:07:29,101 --> 00:07:31,110
这个完全是没有必要记住了

131
00:07:32,820 --> 00:07:34,770
我们再看看还有什么其他典型的

132
00:07:36,870 --> 00:07:40,290
这里边其实大家看到啊

133
00:07:40,291 --> 00:07:44,250
从这个地方有一个分割

134
00:07:44,250 --> 00:07:46,140
再往下就是说，Advanced

135
00:07:46,141 --> 00:07:49,946
或者是它是高级的，或是已经被弃用了

136
00:07:50,971 --> 00:07:53,010
就是其实是不太推荐使用的

137
00:07:55,750 --> 00:07:57,114
比如说这个

138
00:07:58,140 --> 00:08:03,150
这块它是归档那个产品...它也是

139
00:08:03,400 --> 00:08:06,510
所以说，我们这里面其实是推荐使用这个

140
00:08:07,450 --> 00:08:09,510
因此，这就是被弃用的了

141
00:08:09,511 --> 00:08:10,740
所以这个还比较简单的

142
00:08:10,741 --> 00:08:14,576
那么我们看到这里面的列表的东西，不是特别多

143
00:08:16,600 --> 00:08:18,330
Jenkins比较好的地方

144
00:08:18,331 --> 00:08:20,257
就是说你只要装了对应的插件

145
00:08:20,428 --> 00:08:24,224
那么它里面就会有对应的东西能看到

146
00:08:24,525 --> 00:08:25,775
声明式的语法

147
00:08:26,075 --> 00:08:30,100
声明式的语法，好多人觉得这个结构好复杂

148
00:08:30,100 --> 00:08:32,900
其实不是复杂，是这个层次比较多

149
00:08:33,375 --> 00:08:39,060
pipeline,stages,stage,steps...可能这个写的比较费劲

150
00:08:39,061 --> 00:08:40,710
这个还比较容易记住

151
00:08:40,711 --> 00:08:43,450
那比如说agent应该怎么写呢

152
00:08:43,450 --> 00:08:46,560
参数怎么写，选项怎么写

153
00:08:46,561 --> 00:08:49,000
那么我们也是一开始没有必要记

154
00:08:49,370 --> 00:08:50,640
当然，你记着的话更好

155
00:08:52,470 --> 00:08:54,650
对于新接触的人的话，可以这样

156
00:08:54,961 --> 00:08:58,740
首先来说你不知道它能有哪些写法

157
00:08:58,741 --> 00:08:59,970
那么其实就可以这样看

158
00:09:01,476 --> 00:09:06,931
比如说你选这个agent，就能看到这里面有any，就这样写了

159
00:09:06,931 --> 00:09:08,700
那么是在一个docker里面

160
00:09:08,701 --> 00:09:10,770
比如说我们在一个

161
00:09:12,990 --> 00:09:15,240
这样的镜像里，这样写

162
00:09:15,240 --> 00:09:17,669
你没必要记着它那些字段是什么

163
00:09:21,570 --> 00:09:23,070
然后那个label

164
00:09:24,660 --> 00:09:29,610
我们会看到这里是没有k8s的yaml的这种写法的

165
00:09:29,611 --> 00:09:32,580
当你装k8s的插件了之后，就是自然就出来了

166
00:09:32,581 --> 00:09:34,080
所以你也不需要记住那细节

167
00:09:37,380 --> 00:09:38,953
丢弃旧的构建

168
00:09:40,441 --> 00:09:43,425
顺便提一句，丢弃旧的构建指的是说

169
00:09:43,425 --> 00:09:45,990
当我构建一百次之后呢

170
00:09:45,991 --> 00:09:49,740
我可能不太需要把一百次的构建历史都记下来

171
00:09:49,741 --> 00:09:55,170
那么我可以通过这个来设定它，我保留的天数、最大的个数

172
00:09:56,370 --> 00:10:01,470
这两个就可以帮你省掉一些你的存储吧

173
00:10:03,870 --> 00:10:07,470
比如说还有其他的timeout的那些

174
00:10:07,471 --> 00:10:08,580
需要

175
00:10:11,100 --> 00:10:13,830
两个小时，最多运行两个小时就这么写

176
00:10:16,800 --> 00:10:21,480
比如参数，参数这块也是不太容易记住的，比如字符串

177
00:10:24,850 --> 00:10:25,975
就这样写

178
00:10:27,150 --> 00:10:28,380
实际上应该是

179
00:10:30,150 --> 00:10:31,350
如果你这是空的

180
00:10:31,351 --> 00:10:33,900
你可以try sample pipeline

181
00:10:33,901 --> 00:10:36,210
比如说他是HelloWorld啊

182
00:10:36,212 --> 00:10:40,051
这就是这个声明式的流水线

183
00:10:40,051 --> 00:10:42,060
你如果看hello world的话

184
00:10:42,061 --> 00:10:44,400
在我忘了在哪个版本了之前

185
00:10:44,401 --> 00:10:47,970
它默认的写法是这个，这种

186
00:10:49,001 --> 00:10:53,521
就是脚本式的

187
00:10:53,521 --> 00:10:55,920
后来变成这种形式

188
00:10:55,921 --> 00:11:01,975
因此那我们在看这个，这里面的这个指令是生成出来一个参数

189
00:11:01,975 --> 00:11:04,800
那么这个参数应该放到什么地方呢

190
00:11:04,801 --> 00:11:06,600
这个比较容易啊

191
00:11:06,601 --> 00:11:13,075
这块你就是要放到它的根下，这样放

192
00:11:13,561 --> 00:11:19,860
当然我们上一次其实也提到了，这个东西是可以放到一个stage下面

193
00:11:23,730 --> 00:11:24,814
执行成功了

194
00:11:25,129 --> 00:11:26,831
可以看到他用的默认值

195
00:11:27,211 --> 00:11:29,550
但是这个也有点奇怪的地方

196
00:11:29,551 --> 00:11:31,710
就是说我明明定义了个参数

197
00:11:31,711 --> 00:11:34,740
但它在执行的时候居然没有让我输入

198
00:11:36,623 --> 00:11:38,971
你看这也有了，OK

199
00:11:38,971 --> 00:11:43,410
这个情况也算是一个待优化的点吧

200
00:11:43,411 --> 00:11:44,970
它的就是说

201
00:11:44,971 --> 00:11:46,650
当你这里面定义参数之后

202
00:11:46,651 --> 00:11:49,560
第一次他需要解析一下

203
00:11:49,561 --> 00:11:52,320
也就是执行一遍才能解析出来

204
00:11:52,321 --> 00:11:54,200
解析出来之后，这个就不是直接立即构建

205
00:11:54,200 --> 00:11:58,175
而是build with parameters让我们点

206
00:11:59,040 --> 00:12:01,350
就是只能这样去点了

207
00:12:01,350 --> 00:12:05,156
比如说，mike

208
00:12:06,300 --> 00:12:08,820
这就是我们所谓的参数

209
00:12:08,820 --> 00:12:11,100
我们看看输出的值是不是我们想要的

210
00:12:11,350 --> 00:12:13,049
是mike，没问题

211
00:12:14,400 --> 00:12:20,605
所以大家在这里面定义这个参数的时候，要注意一下这个东西

212
00:12:21,390 --> 00:12:25,080
当然如果你在系统里面集成Jenkins的话

213
00:12:25,081 --> 00:12:27,030
这个问题就比较好解决了

214
00:12:27,031 --> 00:12:31,275
那么你可以既往这儿加，也同时往这儿加

